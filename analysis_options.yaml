# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: ./lint_rules.yaml

analyzer:
  exclude:
    #    - example/**
    - test/old/**
    - lib/**.g.dart
    - lib/**/*.freezed.dart

formatter:
  page_width: 120
  trailing_commas: preserve

language:
  strict-casts: true
  strict-inference: true
  strict-raw-types: true

errors:
  # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.
  # We explicitly enable conflicting rules and are fixing the conflicts in this file.
  # Put it to warning temporarily if you need to troubleshoot lint rule settings.
  included_file_warning: ignore

  # Treat missing required parameters as an error, not as a hint or a warning.
  missing_required_param: error

  # Treat missing returns as an error, not as a hint or a warning.
  missing_return: error

  # A record literal with exactly one positional field requires a trailing comma.
  record_literal_one_positional_no_trailing_comma: error

  # Invocation collection methods with arguments of unrelated types.
  collection_methods_unrelated_type: warning

  # Invocation of equality operator == with references of unrelated types.
  unrelated_type_equality_checks: warning

  # Allow self-reference to deprecated members. This is done because otherwise we have
  # to annotate every member in every test, assert, etc. when we deprecate something.
  deprecated_member_use_from_same_package: ignore

  # DON'T assign new values to parameters of methods or functions.
  #
  # https://dart.dev/tools/linter-rules/parameter_assignments.html
  #
  # Treats assigning new values to a parameter as a warning. We would almost like to set this
  # to an error. However, this warning rule, or even more so if you set it to be an error, may
  # be a bit problematic if/when you include other code directly that does it a lot.
  # It does, however, make code safer when this cannot be done without involving
  # an extra local variable for clarity and safety. Enabling this error, even as just a warning,
  # does get in the way a bit if all you want to do is a null to default value release runtime
  # safety/fallback assignment. For that use case, you have to add a local rule override. With
  # null-safety, the need for this kind of null check and re-assignment to default if null,
  # is rarely needed. Considering the comment in:
  # https://dart.dev/tools/linter-rules/parameter_assignments.html:
  # "Assigning new values to parameters is generally a bad practice unless an operator
  # such as ??= is used. Otherwise, arbitrarily reassigning parameters is usually a mistake."
  # One might even think the rule would allow using the ??= operator, but it does not. For now,
  # we keep this lint as warning and overriding locally with:
  #
  # When we need it for the ??= operator, or some copy/pasted in code that does things that
  # require it, that we don't want to deal with fixing at the moment.
  parameter_assignments: warning

  # Allow having TODOs in the code.
  todo: ignore
